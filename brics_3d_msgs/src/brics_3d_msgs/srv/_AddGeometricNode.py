"""autogenerated by genmsg_py from AddGeometricNodeRequest.msg. Do not edit."""
import roslib.message
import struct

import std_msgs.msg
import geometry_msgs.msg
import roslib.rostime
import brics_3d_msgs.msg
import sensor_msgs.msg

class AddGeometricNodeRequest(roslib.message.Message):
  _md5sum = "028308097afd3f15d103b98ac3f87a97"
  _type = "brics_3d_msgs/AddGeometricNodeRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
uint32 parentId
uint32 assignedId
Attribute[] attributes
brics_3d_msgs/Shape shape
time stamp
bool forcedId

================================================================================
MSG: brics_3d_msgs/Attribute
# Attribute description for objects in the world model
string key
string value
================================================================================
MSG: brics_3d_msgs/Shape
byte SPHERE=0
byte BOX=1
byte CYLINDER=2
byte MESH=3
byte POINTCLOUD=4

byte type


#### define sphere, box, cylinder ####
# the origin of each shape is considered at the shape's center

# for sphere
# radius := dimensions[0]

# for cylinder
# radius := dimensions[0]
# length := dimensions[1]
# the length is along the Z axis

# for box
# size_x := dimensions[0]
# size_y := dimensions[1]
# size_z := dimensions[2]
float64[] dimensions


#### define mesh ####

# list of triangles; triangle k is defined by tre vertices located
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]
int32[] triangles
geometry_msgs/Point[] vertices


#### define point cloud ####

sensor_msgs/PointCloud2 pointCloud
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

"""
  __slots__ = ['parentId','assignedId','attributes','shape','stamp','forcedId']
  _slot_types = ['uint32','uint32','brics_3d_msgs/Attribute[]','brics_3d_msgs/Shape','time','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       parentId,assignedId,attributes,shape,stamp,forcedId
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(AddGeometricNodeRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.parentId is None:
        self.parentId = 0
      if self.assignedId is None:
        self.assignedId = 0
      if self.attributes is None:
        self.attributes = []
      if self.shape is None:
        self.shape = brics_3d_msgs.msg.Shape()
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      if self.forcedId is None:
        self.forcedId = False
    else:
      self.parentId = 0
      self.assignedId = 0
      self.attributes = []
      self.shape = brics_3d_msgs.msg.Shape()
      self.stamp = roslib.rostime.Time()
      self.forcedId = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.parentId, _x.assignedId))
      length = len(self.attributes)
      buff.write(_struct_I.pack(length))
      for val1 in self.attributes:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.shape.type))
      length = len(self.shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.shape.dimensions))
      length = len(self.shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.shape.triangles))
      length = len(self.shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.shape.pointCloud.header.seq, _x.shape.pointCloud.header.stamp.secs, _x.shape.pointCloud.header.stamp.nsecs))
      _x = self.shape.pointCloud.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.shape.pointCloud.height, _x.shape.pointCloud.width))
      length = len(self.shape.pointCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.pointCloud.fields:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.shape.pointCloud.is_bigendian, _x.shape.pointCloud.point_step, _x.shape.pointCloud.row_step))
      _x = self.shape.pointCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2IB.pack(_x.shape.pointCloud.is_dense, _x.stamp.secs, _x.stamp.nsecs, _x.forcedId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.shape is None:
        self.shape = brics_3d_msgs.msg.Shape()
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.parentId, _x.assignedId,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.attributes = []
      for i in range(0, length):
        val1 = brics_3d_msgs.msg.Attribute()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.attributes.append(val1)
      start = end
      end += 1
      (self.shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape.dimensions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape.triangles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.shape.pointCloud.header.seq, _x.shape.pointCloud.header.stamp.secs, _x.shape.pointCloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shape.pointCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.shape.pointCloud.height, _x.shape.pointCloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.pointCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.shape.pointCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.shape.pointCloud.is_bigendian, _x.shape.pointCloud.point_step, _x.shape.pointCloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.shape.pointCloud.is_bigendian = bool(self.shape.pointCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shape.pointCloud.data = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.shape.pointCloud.is_dense, _x.stamp.secs, _x.stamp.nsecs, _x.forcedId,) = _struct_B2IB.unpack(str[start:end])
      self.shape.pointCloud.is_dense = bool(self.shape.pointCloud.is_dense)
      self.forcedId = bool(self.forcedId)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.parentId, _x.assignedId))
      length = len(self.attributes)
      buff.write(_struct_I.pack(length))
      for val1 in self.attributes:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_b.pack(self.shape.type))
      length = len(self.shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shape.dimensions.tostring())
      length = len(self.shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.shape.triangles.tostring())
      length = len(self.shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.shape.pointCloud.header.seq, _x.shape.pointCloud.header.stamp.secs, _x.shape.pointCloud.header.stamp.nsecs))
      _x = self.shape.pointCloud.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.shape.pointCloud.height, _x.shape.pointCloud.width))
      length = len(self.shape.pointCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.pointCloud.fields:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.shape.pointCloud.is_bigendian, _x.shape.pointCloud.point_step, _x.shape.pointCloud.row_step))
      _x = self.shape.pointCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B2IB.pack(_x.shape.pointCloud.is_dense, _x.stamp.secs, _x.stamp.nsecs, _x.forcedId))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.shape is None:
        self.shape = brics_3d_msgs.msg.Shape()
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.parentId, _x.assignedId,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.attributes = []
      for i in range(0, length):
        val1 = brics_3d_msgs.msg.Attribute()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.attributes.append(val1)
      start = end
      end += 1
      (self.shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.shape.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.shape.pointCloud.header.seq, _x.shape.pointCloud.header.stamp.secs, _x.shape.pointCloud.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shape.pointCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.shape.pointCloud.height, _x.shape.pointCloud.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.pointCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.shape.pointCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.shape.pointCloud.is_bigendian, _x.shape.pointCloud.point_step, _x.shape.pointCloud.row_step,) = _struct_B2I.unpack(str[start:end])
      self.shape.pointCloud.is_bigendian = bool(self.shape.pointCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.shape.pointCloud.data = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.shape.pointCloud.is_dense, _x.stamp.secs, _x.stamp.nsecs, _x.forcedId,) = _struct_B2IB.unpack(str[start:end])
      self.shape.pointCloud.is_dense = bool(self.shape.pointCloud.is_dense)
      self.forcedId = bool(self.forcedId)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_b = struct.Struct("<b")
_struct_3I = struct.Struct("<3I")
_struct_B2I = struct.Struct("<B2I")
_struct_B2IB = struct.Struct("<B2IB")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genmsg_py from AddGeometricNodeResponse.msg. Do not edit."""
import roslib.message
import struct


class AddGeometricNodeResponse(roslib.message.Message):
  _md5sum = "b61aa853c722cf9ad83045ec5f1f777a"
  _type = "brics_3d_msgs/AddGeometricNodeResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 assignedId
bool succeeded


"""
  __slots__ = ['assignedId','succeeded']
  _slot_types = ['uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       assignedId,succeeded
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(AddGeometricNodeResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.assignedId is None:
        self.assignedId = 0
      if self.succeeded is None:
        self.succeeded = False
    else:
      self.assignedId = 0
      self.succeeded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_IB.pack(_x.assignedId, _x.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.assignedId, _x.succeeded,) = _struct_IB.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_IB.pack(_x.assignedId, _x.succeeded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.assignedId, _x.succeeded,) = _struct_IB.unpack(str[start:end])
      self.succeeded = bool(self.succeeded)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_IB = struct.Struct("<IB")
class AddGeometricNode(roslib.message.ServiceDefinition):
  _type          = 'brics_3d_msgs/AddGeometricNode'
  _md5sum = '7d92cc2c3d05eb1abde098bb3dd9ef48'
  _request_class  = AddGeometricNodeRequest
  _response_class = AddGeometricNodeResponse
